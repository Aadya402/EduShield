# -*- coding: utf-8 -*-
"""cycup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A13c-Ngqb_al2EEAQRnZ7AouTHXdtuyJ
"""

!pip install pandas numpy scikit-learn shap joblib matplotlib

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics import (
    roc_auc_score,
    classification_report,
    accuracy_score,
    precision_recall_curve,
    auc
)
import shap
import matplotlib.pyplot as plt
import joblib

np.random.seed(42)

num_samples = 1000

data = {
    'age': np.random.randint(18, 35, num_samples),
    'income': np.random.randint(200000, 1000000, num_samples),
    'loan_amount': np.random.randint(100000, 800000, num_samples),
    'typing_speed': np.random.normal(250, 40, num_samples),
    'error_rate': np.random.uniform(0, 0.2, num_samples),
    'hesitation_time': np.random.normal(1.2, 0.3, num_samples),
    'device_mismatch': np.random.randint(0, 2, num_samples),
    'ip_mismatch': np.random.randint(0, 2, num_samples),
    'multiple_applications': np.random.randint(0, 2, num_samples),
    'credit_score': np.random.randint(300, 900, num_samples)
}

df = pd.DataFrame(data)

df['Fraud_Flag'] = (
    (df['device_mismatch'] == 1)
    | (df['ip_mismatch'] == 1)
    | (df['multiple_applications'] == 1)
    | (df['credit_score'] < 500)
    | (df['error_rate'] > 0.2)
).astype(int)

print("Dataset Shape:", df.shape)
df.head()

X = df.drop("Fraud_Flag", axis=1)
y = df["Fraud_Flag"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, stratify=y, random_state=42
)

lr_pipeline = make_pipeline(StandardScaler(), LogisticRegression(max_iter=500))
rf_pipeline = make_pipeline(StandardScaler(), RandomForestClassifier(n_estimators=150, random_state=42))

lr_pipeline.fit(X_train, y_train)
rf_pipeline.fit(X_train, y_train)

lr_probs = lr_pipeline.predict_proba(X_test)[:, 1]
rf_probs = rf_pipeline.predict_proba(X_test)[:, 1]

lr_preds = lr_pipeline.predict(X_test)
rf_preds = rf_pipeline.predict(X_test)

lr_auc = roc_auc_score(y_test, lr_probs)
rf_auc = roc_auc_score(y_test, rf_probs)

print("\nLogistic Regression AUC:", lr_auc)
print(classification_report(y_test, lr_preds))

print("\n Random Forest AUC:", rf_auc)
print(classification_report(y_test, rf_preds))

cv_scores = cross_val_score(rf_pipeline, X, y, cv=5, scoring='roc_auc')
print("\n RF CV AUC mean:", np.mean(cv_scores), "std:", np.std(cv_scores))

rf_model = rf_pipeline.named_steps['randomforestclassifier']
feature_importance = pd.Series(rf_model.feature_importances_, index=X.columns).sort_values(ascending=False)
print("\n Top 10 Important Features:\n", feature_importance.head(10))

plt.figure(figsize=(8,5))
feature_importance.head(10).plot(kind='barh', color='skyblue')
plt.gca().invert_yaxis()
plt.title('Top Feature Importances')
plt.xlabel('Importance Score')
plt.show()

rf_model = rf_pipeline.named_steps['randomforestclassifier']

scaler = rf_pipeline.named_steps['standardscaler']
X_test_scaled = scaler.transform(X_test)

explainer = shap.TreeExplainer(rf_model)
shap_values = explainer.shap_values(X_test_scaled)

print("\n Generating SHAP summary plot...")

if isinstance(shap_values, list):
    shap.summary_plot(shap_values[1], X_test, plot_type="bar", show=False)
    plt.title("SHAP Feature Importance (for Fraud Class)")
    plt.show()
else:
    shap.summary_plot(shap_values, X_test, plot_type="bar", show=False)
    plt.title("SHAP Feature Importance")
    plt.show()

precision, recall, thresholds = precision_recall_curve(y_test, rf_probs)

plt.figure(figsize=(7,5))
plt.plot(thresholds, precision[:-1], label='Precision')
plt.plot(thresholds, recall[:-1], label='Recall')
plt.title("Precision-Recall vs Threshold")
plt.xlabel("Threshold")
plt.ylabel("Score")
plt.legend()
plt.show()

idx = np.where(recall >= 0.95)[0]
if len(idx) > 0:
    chosen_idx = idx[-1]
    chosen_threshold = thresholds[chosen_idx]
    print(f" Threshold for recall >= 0.95: {chosen_threshold:.2f}")
    print(f"Precision at that point: {precision[chosen_idx]:.2f}")
else:
    print("No threshold gives recall >= 0.95")

joblib.dump(rf_pipeline, "fraud_detection_pipeline.pkl")
print("\n Model saved as fraud_detection_pipeline.pkl")

sample = X_test.iloc[0:1]
prob = rf_pipeline.predict_proba(sample)[:,1][0]
pred = (prob > 0.5).astype(int)

print(f"\nSample Fraud Probability: {prob:.2f}")
print(f"Predicted Fraud Flag: {bool(pred)}")

import joblib
import pandas as pd

try:
    loaded_pipeline = joblib.load("fraud_detection_pipeline.pkl")
    print("Model pipeline loaded successfully!")
except FileNotFoundError:
    print(" Error: 'fraud_detection_pipeline.pkl' not found. Make sure the file is in the correct directory.")
    loaded_pipeline = None

if loaded_pipeline:
    sample_data = {
        'age': [23],
        'income': [450000],
        'loan_amount': [100000],
        'typing_speed': [40],
        'error_rate': [0.1],
        'hesitation_time': [2],
        'device_mismatch': [0],
        'ip_mismatch': [0],
        'multiple_applications': [0],
        'credit_score': [900]
    }
    sample_df = pd.DataFrame(sample_data)
    print("\n Sample data for prediction:\n", sample_df)

    fraud_probability = loaded_pipeline.predict_proba(sample_df)[:, 1][0]

    prediction = loaded_pipeline.predict(sample_df)[0]

    print(f"\n Prediction Results:")
    print(f"   Fraud Probability: {fraud_probability:.2%}")
    print(f"   Final Prediction: {'Fraud' if prediction == 1 else 'Not Fraud'}")